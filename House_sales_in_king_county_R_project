---
title: "house_la1"
author: "Adesh R Jain"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# load all the libraries you want in your project
library(ggplot2)
library(dplyr)
library(ggcorrplot)
library(lubridate)
# here we are going to read the data set i.e csv file with the help of read command
```{r}
house = read.csv('kc_house_data.csv')
```
# the head commands displays the first six rows of the data set with column names
```{r}
head(house)
```
# the dim command displays the dimension of the dataset that is no of rows and columns
```{r}
dim(house)
```
# the str command gives the entire structure of the dataset
```{r}
str(house)
```
# the summary command summarizes your dataset
```{r}
summary(house)
```


#  the length command gives the no of columns in the dataset
```{r}
length(house)
```
# the colnames command is used to display the name of the columns
```{r}
colnames(house)
```

# the view command is used to display the entire dataset in another file
```{r}
View(house)
```

# the below command is used to check tfor null values
```{r}
sum(is.na(house))
```
# finding the corelation for price
```{r}
cor(house$sqft_living, house$price)

```
# creating a basic scatter plot
```{r}
library(ggplot2)
ggplot(house, aes(x=sqft_living, y=price)) + geom_point()

```
# creating a basic categorical boxplotr
```{r}
ggplot(house, aes(x=condition, y=price)) + geom_boxplot()

```
# creating a basic bargraph 
```{r}
ggplot(house, aes(x=bedrooms, y=price)) + geom_bar(stat="identity")

```

# cor command is used to find the corelation  and ggcorrplot is used to plot a corelation matrix
```{r}
library(ggcorrplot)
res = cor(house[-2])
corr = round(cor(house[-2]),3)
head(corr)
ggcorrplot(corr, type = "lower",
           lab = TRUE)
```

# we are changing the data type of"date" from 'char' to 'date' for regression but we are not performing any ml concepts
```{r}
library(lubridate)
house$date = (substr(house$date, 1, 8))
house$date = ymd(house$date)
house$date = as.Date(house$date, origin = "1900-01-01")
head(house$date)

```
# PLOTING GRAPH OF PRICE VS THOSE VARIABLE WITH HEIGHEST CORRELATION 

```{r}
library(ggplot2)
#PRICE DISTRIBUTION:
ggplot(house,aes(x=price))+
  geom_freqpoly(binwidth = 500)+ 
  theme_dark()+
  xlab('Price')+
  ylab('Count')+
  ggtitle('Price Distribution')
# more number of houses cost in the range of 0 to 1.6 M
```
# geom_histogram is used to plot a histogram and we are ploting a histogram for price vs count
```{r}
library(ggplot2)
log_price = log10(house$price)     # converting Price column in log scale


ggplot(house,aes(log_price))+
  geom_histogram(fill='lightblue',binwidth = 0.10)+
  theme_dark()+
  xlab('Price')+
  ylab('Count')+
  ggtitle('Price Distribution')
```
# geom_density is used to plot density curve graph and we plotting it for density vs log-transformed price
```{r}
library(ggplot2)

log_price <- log10(house$price)  

ggplot(house, aes(x = log_price)) +
  geom_density(fill = 'lightblue', alpha = 0.7) +
  theme_dark() +
  xlab('Log-Transformed Price') +
  ylab('Density') +
  ggtitle('Density Plot of Log-Transformed Price')

```
#geom_density2d is used to plot a density2d graph and we arer plotting it forbedrooms vslog-transformed price
```{r}
library(ggplot2)
library(scales)

# Assuming 'house' is your dataset
log_price <- log10(house$price)

# Create a 2D density plot
ggplot(house, aes(x = log_price, y = bedrooms)) +
  geom_density2d(fill = 'lightblue', color = 'white') +
  theme_dark() +
  xlab('Log-Transformed Price') +
  ylab('Bedrooms') +
  ggtitle('2D Density Plot of Log-Transformed Price and Bedrooms')

```
# plotting a box plot graph for price
```{r}
boxplot(house$price)
```
# dropping the out liers
```{r}
dim(house)  #21613
house = subset(house,!(house$price > 6000000))
dim(house)   # 21610
```
# we are plotting a frequencypolygon plotfor court vs square feet long
```{r}
log_size=log10(house$sqft_living)
ggplot(house,aes(sqft_living))+
  geom_freqpoly(color='yellow',binwidth = 50)+
  theme_dark()+
  xlab('SQUARE FEET LIVING')+
  ylab('Count')+
  ggtitle('Distribution of SQUARE FEET LIVING')
```
# plotting a box plot for sqft_living
```{r}
ggplot(house,aes(sqft_living))+
  geom_boxplot()+
  ggtitle('Distribution of SQUARE FEET LIVING')
```
# plotting a jitter plot kinf of scatter plot for the variable square feet long vs price
```{r}
ggplot(house,aes(x=sqft_living,y=price))+
  geom_jitter(color='aquamarine3')+
  xlab('SQUARE FEET LIVING')+
  ylab('Price')+
  ggtitle('Price vs Square Feet Living')
```
#dropping the outliers
```{r}

dim(house)  #21610
house = subset(house,!(house$sqft_living > 8500))
dim(house) 
```
#  generating a frequency polygon (histogram) for the variable sqft_above using geom_freqpoly
```{r}
ggplot(house,aes(sqft_above))+
  geom_freqpoly(binwidth=50,color = 'cyan4')+
  xlab('SQUARE FEET ABOVE')+
  ggtitle("Distribution of square feet above")
```
# generating a scatter plot using geom_jitter in ggplot2, where the x-axis represents the variable sqft_above, the y-axis represents the variable price, and points are jittered for better visualization.
```{r}
ggplot(house,aes(x=sqft_above,y=price))+
  geom_jitter(color = 'aquamarine3')+
  xlab('SQUARE FEET ABOVE')+
  ylab('Price')+
  ggtitle('Prive vs Square feet above')
```
#  generates a scatter plot using geom_jitter in ggplot2. The x-axis represents the variable sqft_above, the y-axis represents the variable price, and points are jittered for better visualization. The x-axis label is set to 'SQUARE FEET ABOVE,' the y-axis label is set to 'Price,' and the plot has a title 'Price vs Square feet above.
```{r}
ggplot(house,aes(x=sqft_above,y=price))+
  geom_jitter(color = 'aquamarine3')+
  xlab('SQUARE FEET ABOVE')+
  ylab('Price')+
  ggtitle('Prive vs Square feet above')
```
# create a scatter plot with jittered points. The x-axis represents the variable sqft_above, and the y-axis represents the logarithm (base 10) of the variable price. Points are jittered for better visualization
```{r}
log_price = log10(house$price)
ggplot(house,aes(x=sqft_above,y=log_price))+
  geom_jitter(color='aquamarine3')+
  xlab('SQUARE FEET ABOVE')+
  ylab('Log_Price')+
  ggtitle('log_price vs Square feet above')
```
# the below code rounds the values in the "bathrooms" column of the "house" data frame to the nearest integer.
```{r}
head(house$bathrooms,10)
house$bathrooms= round(house$bathrooms,0)
```
# The code returns the unique values in the "bathrooms" column of the "house" data frame
```{r}
unique(house$bathrooms)
```
# creating a bar plot to visualize the distribution of different bathroom counts
```{r}
house$bathrooms = as.factor(house$bathrooms)

ggplot(house,aes(bathrooms))+
  geom_bar(fill="cyan4")+
  ggtitle('Distribution of bathrooms')
```
# creating a boxplot to visualize the distribution of bathroom vs price
```{r}
ggplot(house, aes(x=bathrooms,y=price))+
  geom_boxplot()+
  ggtitle("Price vs Bathrooms")
```
# the below code creates a scatter plot for pricve vs squarefeet living
```{r}
ggplot(house, aes(x=sqft_living, y=price, color=bathrooms))+
  geom_point()+
  ggtitle(" Price vs sqft living on the bases of bathrooms")
```
# creates a frequency table of the 'bathrooms' column in a pandas dataframe.
```{r}
table(house$bathrooms)
```
# displays the dimensions of the house data frame
```{r}
dim(house)
```
# creates a subset for the house dataframe and provides dimensions of it
```{r}
house = subset(house,!(house$bathrooms == 0 | house$bathrooms == 7 | house$bathrooms == 8))
dim(house)
```
# creates a bargraph for the column bathroom
```{r}
table(house$bathrooms)

ggplot(house,aes(bathrooms))+
  geom_bar(fill="cyan4")+
  ggtitle("Distribution of Bathrooms")
```
# we are factorzing the condition column and finding the unique values
```{r}
house$condition=as.factor(house$condition)
unique(house$condition)
table(house$condition)
```
# plotting a bar graph for condition column
```{r}
ggplot(house,aes(condition))+
  geom_bar(color = 'aquamarine4')+
  xlab('condition')+
  ggtitle("Distribution of Condition ")
```
# creates a boxplot for condition vs price
```{r}
ggplot(house,aes(x= condition,y= price))+
  geom_boxplot(color = 'aquamarine4')+
  xlab('condition')+
  ylab('Price')+
  ggtitle("Price vs Condition")
```
# creates a box plot for condition vs log_price
```{r}
log_price = log10(house$price)
ggplot(house,aes(x= condition,y= log_price))+
  geom_boxplot(color = 'aquamarine4')+
  xlab('Condition')+
  ylab('Log_Price')+
  ggtitle("Log_price vs  Condition")
```
# Generates a scatter plot of log price vs log size, faceted by condition, for visual exploration of relationships between price, size, and condition.
```{r}
log_size=log10(house$sqft_living)
house$condition = as.factor(house$condition)
ggplot(house,aes(x=log_size,y=log_price,color=condition))+
  geom_point(size=0.5)+
  facet_wrap(~condition)+
  ggtitle("Log_price vs Log_size for each Condition")
```

```{r}
library(dplyr)
house$floors = as.factor(house$floors)
table(house$floors)
house %>% group_by(flr=floors)%>%summarise(floor_cnt=n())%>%
  ggplot(aes(x=flr,floor_cnt,fill=flr))+
  geom_bar(stat="identity",alpha = 0.5)+
  scale_fill_manual(values =rainbow(n=6))+
  labs(x="floors",y="No of houses")+
  ggtitle("No. of Houses vs Floors")
```
#  creates a boxplot for floors vs price columns
```{r}
ggplot(house,aes(x= floors,y= log_price))+
  geom_boxplot(color = 'aquamarine4')+
  xlab('Floors')+
  ylab('Price')+
  ggtitle("Price vs Floors")
```
# creates a scatter plot for longtitude vs latitude and uses jitter points for better visualizations
```{r}
ggplot(house, aes(y= long, x= lat))+
  geom_jitter()+
  ggtitle("Longitude vs Latitude")
# indicating these are points on a map
df = data.frame(house$long,house$lat)
head(df)
```


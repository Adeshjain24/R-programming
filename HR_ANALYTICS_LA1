---
title: "hr__analytics"
author: "Adesh R Jain"
date: "`r Sys.Date()`"
output:
  word_document: default
  html_document: default
---
```
# we are the reading the csv file from the location where we have stored the data set
```{r}
train<-read.csv("aug_train.csv",na.strings = "")

```
# we are loading the necessary libraries used in this project
```{r}
library('dataPreparation')
library(ggplot2)
library(reshape2)
library(missRanger)
library("imbalance")
library(xgboost) 
library("caret")
library("tidyverse")
library("MLmetrics")
library("plotly")
library(plotly)
```
# it gives the first 6 rows in our data set
```{r}
head(train)
```
# it summarizes the data
```{r}
summary(train)
```
# provides the strcture of our dataset
```{r}
str(train)
```
# gives the dimensions(number of rows and columns)
```{r}
dim(train)
```
it retrieves the columns in the data frame
```{r}
names(train)
```
# the below code performs label encoding on categorical columns in the 'train' dataset,creating a new dataset 'template' with numeric representation.
```{r}
#Don't forget to draw heatmap after label encoding
# label encoding
template <- train
template$city <- as.numeric(as.factor(train$city))
template$gender <- as.numeric(factor(train$gender))
template$relevent_experience <- as.numeric(as.factor(train$relevent_experience))
template$enrolled_university <- as.numeric(factor(train$enrolled_university))
template$education_level <- as.numeric(factor(train$education_level))
template$major_discipline <- as.numeric(factor(train$major_discipline))
template$experience <- as.numeric(factor(train$experience))
template$company_size <- as.numeric(factor(train$company_size))
template$company_type <- as.numeric(factor(train$company_type))
template$last_new_job <- as.numeric(factor(train$last_new_job))
template$training_hours <- as.double(train$training_hours)
template$target <- as.numeric(train$target)

head(template)

```
# creates a histogram for columns at position 3 and 13 and bar plots for other numeric columns int the dataset
```{r}
l = colnames(train)
for(i in 3:ncol(train)){
    if(i %in% c(3,13) ){
        hist(train[ , i],col="#3090C7",main=l[i])
    }
    else{
        barplot(table(train[ , i]),col=rainbow(length(unique(train[ , i]))),main=l[i]) 
    }
}

```
# creates two pie charts using plotly to visualize the distributuion of 'relevant_experience'for job change nand no change
```{r}
change = train[train$target == 1,]# looking for change
no_change = train[train$target == 0,]# not looking for change
fig <- plot_ly(change, labels = ~relevent_experience,marker = list(colors = c("#3090C7","red")), type = 'pie',domain = list(x = c(0, 0), y = c(1, 1)))
fig <- fig %>% layout(title = 'Percentages of each class of relevent_experience feature when target is looking for job change')

fig

fig2 <- plot_ly(no_change, labels = ~relevent_experience,marker = list(colors = c("red","red")), type = 'pie',domain = list(x = c(0, 0), y = c(1, 1)))
fig2 <- fig2 %>% layout(title = 'Percentages of each class of relevent_experience feature when target is not looking for job change')

fig2

```
# creates two pie charts using plotly to illustrate the distributuion of 'educatiom_level'classes fro job change and no change
```{r}
fig <- plot_ly(change, labels = ~education_level, type = 'pie',domain = list(x = c(0, 0), y = c(1, 1)))
fig <- fig %>% layout(title = 'Percentages of each class of education_level feature when target is looking for job change')

fig

fig2 <- plot_ly(no_change, labels = ~education_level, type = 'pie',domain = list(x = c(0, 0), y = c(1, 1)))
fig2 <- fig2 %>% layout(title = 'Percentages of each class of education_level feature when target is not looking for job change')

fig2

```
#  creates two pie charts for distributuion of 'major_discipline' classes for no job change and job change
```{r}
fig <- plot_ly(change, labels = ~major_discipline, type = 'pie',domain = list(x = c(0, 0), y = c(1, 1)))
fig <- fig %>% layout(title = 'Percentages of each class of major_discipline feature when target is looking for job change')

fig

fig2 <- plot_ly(no_change, labels = ~major_discipline, type = 'pie',domain = list(x = c(0, 0), y = c(1, 1)))
fig2 <- fig2 %>% layout(title = 'Percentages of each class of major_discipline feature when target is not looking for job change')

fig2

```
# creates two pie charts displaying the distribution of 'gender'classes for job change and no job change
```{r}
fig <- plot_ly(change, labels = ~gender, type = 'pie',domain = list(x = c(0, 0), y = c(1, 1)))
fig <- fig %>% layout(title = 'Percentages of each class of gender feature when target is looking for job change')

fig

fig2 <- plot_ly(no_change, labels = ~gender, type = 'pie',domain = list(x = c(0, 0), y = c(1, 1)))
fig2 <- fig2 %>% layout(title = 'Percentages of each class of gender feature when target is not looking for job change')

fig2
```
# used to print nulls count in each feature
```{r}
res<-NULL
for (i in 1:ncol(train)){
  temp<-sum(is.na(train[,i]))
  temp<-as.data.frame(temp)
  temp$percentage<- sum(is.na(train[,i])) * 100 / nrow(train)
  temp$var<-colnames(train)[i]
  res<-rbind(res,temp)
}
res
```
# creates a bar chart using ggplot2 to visualize the total count of missing values in each column of the 'train' data set
```{r}
res$var <- factor(res$var,levels = res$var[order(res$temp,decreasing = TRUE)])

ggplot(res,aes(x=var,y=temp))+
  geom_bar(stat = "identity",col = "green")+
    theme(axis.text.x = element_text(angle = 90, hjust =1, vjust = 0.5))+
    geom_label(aes(label = temp, size = NULL), nudge_y = 0.7)+
    theme(plot.title = element_text(hjust = 0.5))+
    ggtitle("Total NA's by each col")+
    xlab("Missing Values")
    ylab("Total NA's")
```
#  create a bar chart depiciting the % of null values in each column of the 'train' dataset
```{r}
fig <- plot_ly(res, x = ~var, y = ~percentage, type = 'bar')
fig <- fig %>% layout(title = 'Percentages of nulls in each column')

fig
```
# creates a histogram for the 'cityh_development' and 'taining_hours'.A logarithmic transformation is then applied to 'taining_hours' to achieve a more normalized distribution
```{r}
#par(mfrow=c(2,2))
hr<-train
hist(hr$city_development_index,col="#3090C7",main="city_development_index")#left skewed
hist(hr$training_hours,col="#3090C7",main="training_hours")#right skewed
hr$training_hours = log(hr$training_hours)
#hr$city_development_index = log(hr$city_development_index)
hist(hr$training_hours,col="green")
```
#  create pie chart representing the percentages of each value in the 'target' column of the 'hr' dataset
```{r}
fig <- plot_ly(hr, labels = ~target, type = 'pie')
fig <- fig %>% layout(title = 'Percentages of each value in target column')

fig
```
#  creates a box plot to visualize the outliers
```{r}
#visualize the outliers
boxplot(hr$city_development_index,main="city_development_index",col='red')
boxplot(hr$training_hours,main="training_hours",col='red')
```
# The code mitigates outliers in 'city_development_index' and 'training_hours' of the 'hr' dataset by capping extreme values within 1.5 times the interquartile range

```{r}
outliers_features = c("city_development_index","training_hours")
for (i in outliers_features) {
  Inter_Quartile_Range <- IQR(hr[[i]])
  lower_boundary <- quantile(hr[[i]], 0.25) - (Inter_Quartile_Range * 1.5)
  upper_boundary <- quantile(hr[[i]], 0.75) + (Inter_Quartile_Range * 1.5)
  hr[[i]] <- ifelse(hr[[i]] > upper_boundary, upper_boundary,
                           ifelse(hr[[i]] < lower_boundary, lower_boundary, hr[[i]]))
}
```
creates a box plot to visualize the outliers
```{r}
#visualize the outliers
boxplot(hr$city_development_index,main="city_development_index",col='red')
boxplot(hr$training_hours,main="training_hours",col='red')#outliers at values above 250
```
# categorizes the 'experience' variable into intervals (0-5, 5-10, 10-15, 15-20, >20 years) and visualizes the distribution of experiences in these intervals using a bar plot.
```{r}
#experience
unique(hr$experience)
#too many values for experience so let us divide it into sections
hr$experience[hr$experience=="<1"|hr$experience=="1"|hr$experience=="2"|hr$experience=="3"|hr$experience=="4"|hr$experience=="5"]<-"0-5"
hr$experience[hr$experience=="6"|hr$experience=="7"|hr$experience=="8"|hr$experience=="9"|hr$experience=="10"]<-"5-10"
hr$experience[hr$experience=="11"|hr$experience=="12"|hr$experience=="13"|hr$experience=="14"|hr$experience=="15"]<-"10-15"
hr$experience[hr$experience=="16"|hr$experience=="17"|hr$experience=="18"|hr$experience=="19"|hr$experience=="20"|hr$experience==">20"]<-"15-20"
barplot(table(hr$experience),col=rainbow(4),main="experience in intervals")#most people have five years of experience
```
#  it drops specific column from the 'hr'data frame and displays its remaining column
```{r}
hr<-hr[-c(1,2,5)]
names(hr)
#hr<-hr[!is.na(hr$major_discipline)|hr$target==1,]
#hr$major_discipline[hr$major_discipline!="STEM"&hr$major_discipline!="No Major"]<-"Other"
#hr<-hr[!is.na(hr$enrolled_university)|hr$target==1,]
#hr<-hr[!is.na(hr$education_level)|hr$target==1,]
#hr<-hr[!is.na(hr$last_new_job)|hr$target==1,]
#hr<-hr[!is.na(hr$experience)|hr$target==1,]
dim(hr)
head(hr)
```
# missRanger function is used to impute the missing values in the dataframe using random forest-based imputation
```{r}
new_hr<-missRanger(
  hr,
  formula = . ~ .,
  num.trees=100,
  seed=3
)
head(new_hr)

```
# calculates the number and percentage of missing values for each variable in the 'new_hr' data frame, creating a summary data frame named 'res'.
```{r}
res<-NULL
for (i in 1:ncol(new_hr)){
  temp<-sum(is.na(new_hr[,i]))
  temp<-as.data.frame(temp)
  temp$percentage<- sum(is.na(new_hr[,i])) * 100 / nrow(new_hr)
  temp$var<-colnames(new_hr)[i]
  res<-rbind(res,temp)
}
res
```
#  calculates the total number of missing values in each column with the help of barplot
```{r}
res$var <- factor(res$var,levels = res$var[order(res$temp,decreasing = TRUE)])

ggplot(res,aes(x=var,y=temp))+
  geom_bar(stat = "identity",col = "green")+
    theme(axis.text.x = element_text(angle = 90, hjust =1, vjust = 0.5))+
    geom_label(aes(label = temp, size = NULL), nudge_y = 0.7)+
    theme(plot.title = element_text(hjust = 0.5))+
    ggtitle("Total NA's by each col")+
    xlab("Missing Values")
    ylab("Total NA's")
```
# As we can't pass strings to the model i used one hot encoder to label categorical features
```{r}
categorical_features = new_hr[-c(1,10,11)]

encoding <- build_encoding(new_hr, cols = colnames(categorical_features), verbose = TRUE)

new_hr2 <- one_hot_encoder(new_hr, encoding = encoding, drop = TRUE)
head(new_hr2)
```
# As we can't pass strings to the model i used label encoder to label categorical feature
```{r}
#Don't forget to draw heatmap after label encoding
# label encoding
#train <- hr
#train$city <- as.factor(train$city)
#train$gender <- as.numeric(factor(train$gender))
#train$relevent_experience <- as.factor(train$relevent_experience)
#train$enrolled_university <- as.numeric(factor(train$enrolled_university))
#train$education_level <- as.numeric(factor(train$education_level))
#train$major_discipline <- as.numeric(factor(train$major_discipline))
#train$experience <- as.numeric(factor(train$experience))
#train$company_size <- as.numeric(factor(train$company_size))
#train$company_type <- as.numeric(factor(train$company_type))
#train$last_new_job <- as.numeric(factor(train$last_new_job))
#train$training_hours <- as.double(train$training_hours)
#train$target <- as.numeric(train$target)

#str(train)
#head(train)
```
# assigns the data frame new_hr2 to the variable train
```{r}
train = new_hr2
```
# diplays the column names int he dataset
```{r}
colnames(train)
```
# we are  renaming specific columns in the data frame train by modifying their column names
```{r}
colnames(train)[8] <- 'enrolled.university.Full.time.course'
colnames(train)[9] <- 'enrolled.university.Part.time.course'
colnames(train)[12] <- 'education.level.High.School'
colnames(train)[14] <- 'education.level.Primary.School'
colnames(train)[16] <- 'major.discipline.Business.Degree'
colnames(train)[19] <- 'major.discipline.No.Major'
colnames(train)[33] <- 'company.type.Pvt.Ltd'
colnames(train)[34] <- 'company.type.Funded.Startup'
colnames(train)[35] <- 'company.type.Early.Stage.Startup'
colnames(train)[37] <- 'company.type.Public.Sector'
```
# As we saw that target feature is unbalanced therefore i used oversampler to balance classes in this feature
```{r}
new_train <- oversample(train, method = "ADASYN",classAttr = "target")
```
# we display the frequency distributuion of the target variable in botgh the original dataset and new train dataset with the help of table() function
```{r}
table(train$target)
table(new_train$target)
```
# create a barplot for the displaying the distribution of ther target variable in the new train dataset
```{r}
barplot(table(new_train$target),col=rainbow(2),main="target")
```
# prints the first 6 rows in the new train dataset
```{r}
head(new_train)
```
# display sthe new dimensions of the new train dataset
```{r}
dim(new_train)
```
# creating a histogram and barplots for various columns in the new train dataset
```{r}
l = colnames(new_train)
for(i in 1:ncol(new_train)){
    if(i == 1){
        hist(new_train$city_development_index,col="#3090C7",main=l[i])
    }
    if(i == 2){
        hist(new_train$training_hours,col="#3090C7",main=l[i])
    }
    if(i>2){
        barplot(table(new_train[ , ..i]),col=c("red","#3090C7"),main=l[i]) 
    }
}
```
# select all columns from train dataset except for the target column and assign the resulting dataset to xand also extracts the target column and assigns it to y
```{r}
X <- select(train, -target)
y <- train$target

col <- colnames(X)
```
#  displays the dimensions of the datset X
```{r}
dim(X)
```



